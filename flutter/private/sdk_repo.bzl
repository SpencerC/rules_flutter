"""Creates a repository alias that always exposes the host Flutter SDK.

The repository mirrors the contents of the platform-specific Flutter SDK
selected for the current host machine so that clients can uniformly depend
on `@<name>_sdk` (e.g. `@flutter_sdk`) without caring about the underlying
platform repository name.
"""

def _host_platform(os_name):
    """Normalize Bazel host OS strings to Flutter platform suffixes."""
    lower_name = os_name.lower()
    if lower_name.startswith("mac"):
        return "macos"
    if lower_name.startswith("linux"):
        return "linux"
    if lower_name.startswith("windows"):
        return "windows"
    fail("Unsupported host platform '{}'. Expected macOS, Linux, or Windows.".format(os_name))

def _sdk_repo_impl(repository_ctx):
    platform = _host_platform(repository_ctx.os.name)
    target_repo = "{}_{}".format(repository_ctx.attr.user_repository_name, platform)

    build_label = Label("@{}//:BUILD.bazel".format(target_repo))
    build_path = repository_ctx.path(build_label)
    if not build_path.exists:
        fail("Unable to locate Flutter SDK repository '{}' for host platform '{}'".format(target_repo, platform))

    _write_root_aliases(repository_ctx, target_repo)
    _write_package_aliases(repository_ctx, build_path.dirname, target_repo)

    repository_ctx.file(
        "HOST_PLATFORM",
        "rules_flutter host SDK alias for {}\n".format(platform),
    )

def _write_root_aliases(repository_ctx, target_repo):
    """Emit aliases for top-level targets provided by the SDK repository."""

    content = """# Generated by rules_flutter//flutter/private:sdk_repo.bzl
alias(
    name = "flutter_binary_unix",
    actual = "@{repo}//:flutter_binary_unix",
    visibility = ["//visibility:public"],
)

alias(
    name = "flutter_binary_windows",
    actual = "@{repo}//:flutter_binary_windows",
    visibility = ["//visibility:public"],
)

alias(
    name = "flutter_sdk",
    actual = "@{repo}//:flutter_sdk",
    visibility = ["//visibility:public"],
)

alias(
    name = "flutter_toolchain",
    actual = "@{repo}//:flutter_toolchain",
    visibility = ["//visibility:public"],
)
""".format(repo = target_repo)

    repository_ctx.file("BUILD.bazel", content)

def _write_package_aliases(repository_ctx, host_root, target_repo):
    """Create alias BUILD files for Flutter SDK packages."""

    for rel_root in ["flutter/packages", "flutter/bin/cache/pkg"]:
        host_dir = _path_join(host_root, rel_root)
        if not host_dir.exists or not host_dir.is_dir:
            continue

        for entry in host_dir.readdir():
            if not entry.is_dir:
                continue
            if not entry.get_child("pubspec.yaml").exists:
                continue

            package = entry.basename
            rel_dir = "{}/{}".format(rel_root, package)
            content = """# Generated alias for {package}
alias(
    name = "{package}",
    actual = "@{repo}//{rel_dir}:{package}",
    visibility = ["//visibility:public"],
)
""".format(
                package = package,
                repo = target_repo,
                rel_dir = rel_dir,
            )
            repository_ctx.file("{}/BUILD.bazel".format(rel_dir), content)

def _path_join(root, rel_path):
    """Return a Path for rel_path under root (without touching the filesystem)."""

    current = root
    for component in rel_path.split("/"):
        if not component:
            continue
        current = current.get_child(component)
    return current

flutter_sdk_repo = repository_rule(
    implementation = _sdk_repo_impl,
    attrs = {
        "user_repository_name": attr.string(
            doc = "Base repository name used when registering Flutter toolchains.",
            mandatory = True,
        ),
    },
    doc = "Creates a host-aware alias repository exposing the Flutter SDK.",
)
