"""Repository utilities for Flutter toolchains used via bzlmod."""

load("//flutter/private:package_generation.bzl", "generate_package_build")
load("//flutter/private:sdk_repo.bzl", "flutter_sdk_repo")
load("//flutter/private:toolchains_repo.bzl", "PLATFORMS", "toolchains_repo")
load("//flutter/private:versions.bzl", "TOOL_VERSIONS")

########
# Repository rules used by the module extension to support toolchains.
########
_DOC = "Fetch external tools needed for flutter toolchain"
_ATTRS = {
    "flutter_version": attr.string(mandatory = True, values = TOOL_VERSIONS.keys()),
    "platform": attr.string(mandatory = True, values = PLATFORMS.keys()),
}

def _flutter_repo_impl(repository_ctx):
    # Flutter SDK download URLs from Google Cloud Storage
    platform = repository_ctx.attr.platform
    extension = "zip" if platform == "windows" else ("zip" if platform == "macos" else "tar.xz")
    url = "https://storage.googleapis.com/flutter_infra_release/releases/stable/{0}/flutter_{0}_{1}-stable.{2}".format(
        platform,
        repository_ctx.attr.flutter_version,
        extension,
    )

    # Download and verify Flutter SDK with integrity checking enabled
    repository_ctx.download_and_extract(
        url = url,
        integrity = TOOL_VERSIONS[repository_ctx.attr.flutter_version][repository_ctx.attr.platform],
    )
    package_labels = _generate_flutter_packages(repository_ctx)

    package_group = ""
    if package_labels:
        package_group = """
filegroup(
    name = "flutter_sdk_packages",
    srcs = [
{package_srcs}
    ],
    visibility = ["//visibility:public"],
)
""".format(
            package_srcs = "\n".join(['        "{}",'.format(label) for label in sorted(package_labels)]),
        )

    build_content = """# Generated by flutter/repositories.bzl
load("@rules_flutter//flutter:toolchain.bzl", "flutter_toolchain")

# Create file targets for Flutter binaries
filegroup(
    name = "flutter_binary_unix",
    srcs = ["flutter/bin/flutter"],
    visibility = ["//visibility:public"],
)

filegroup(
    name = "flutter_binary_windows", 
    srcs = ["flutter/bin/flutter.bat"],
    visibility = ["//visibility:public"],
)

filegroup(
    name = "flutter_sdk",
    srcs = glob(["flutter/**/*"]) + [{sdk_packages}],
    visibility = ["//visibility:public"],
)

flutter_toolchain(
    name = "flutter_toolchain",
    target_tool = select({{
        "@platforms//os:windows": ":flutter_binary_windows",
        "//conditions:default": ":flutter_binary_unix",
    }}),
    sdk_files = ":flutter_sdk",
)
{package_group}
""".format(
        sdk_packages = '":flutter_sdk_packages"' if package_labels else "",
        package_group = package_group,
    )

    repository_ctx.file("BUILD.bazel", build_content)

def _generate_flutter_packages(repository_ctx):
    """Generate BUILD files for packages bundled within the Flutter SDK."""

    package_roots = [
        "flutter/packages",
        "flutter/bin/cache/pkg",
    ]

    package_labels = []

    for root in package_roots:
        root_path = repository_ctx.path(root)
        if not root_path.exists or not root_path.is_dir:
            continue

        for entry in root_path.readdir():
            if not entry.is_dir:
                continue

            package_dir = "{}/{}".format(root, entry.basename)
            pubspec_path = repository_ctx.path(package_dir + "/pubspec.yaml")
            if not pubspec_path.exists:
                continue

            package_name = entry.basename
            generate_package_build(
                repository_ctx,
                package_name = package_name,
                package_dir = package_dir,
                include_hosted_deps = False,
            )

            package_labels.append("//{}:{}_files".format(package_dir, package_name))

    return package_labels

flutter_repositories = repository_rule(
    _flutter_repo_impl,
    doc = _DOC,
    attrs = _ATTRS,
)

# Wrapper macro around everything above, this is the primary API
def flutter_register_toolchains(name, register = True, **kwargs):
    """Convenience macro for users which does typical setup.

    - create a repository for each built-in platform like "flutter_linux_amd64"
    - create a convenience repository exposing the host SDK as "<name>_sdk"
    - create a repository exposing toolchains for each platform like "flutter_platforms"
    - register a toolchain pointing at each platform
    Users can avoid this macro and do these steps themselves, if they want more control.
    Args:
        name: base name for all created repos, like "flutter1_14"
        register: whether to call through to native.register_toolchains.
            Set this to False when toolchain registration is handled elsewhere (for example by a module extension).
        **kwargs: passed to each flutter_repositories call
    """
    for platform in PLATFORMS.keys():
        flutter_repositories(
            name = name + "_" + platform,
            platform = platform,
            **kwargs
        )
        if register:
            native.register_toolchains("@%s_toolchains//:%s_toolchain" % (name, platform))

    toolchains_repo(
        name = name + "_toolchains",
        user_repository_name = name,
    )

    flutter_sdk_repo(
        name = name + "_sdk",
        user_repository_name = name,
    )
